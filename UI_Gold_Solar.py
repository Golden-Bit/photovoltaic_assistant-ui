########################################################################################################################
########################################################################################################################
import os

import requests
import streamlit as st

########################################################################################################################
########################################################################################################################


#def get_stream(url, json_input):
#
#    s = requests.Session()
#    full_response = ""
#    non_decoded_chunk = b''
#    with s.post(url, json=json_input, headers=None, stream=True) as resp:
#        for chunk in resp.iter_content():
#            if chunk:
#                non_decoded_chunk += chunk
#                try:
#                    full_response += non_decoded_chunk.decode()
#                    message_placeholder.markdown(full_response + "▌")
#                    non_decoded_chunk = b''
#                except UnicodeDecodeError:
#                    pass

url = st.secrets["url"]

system_message = "qa_on_knowledge_bank"

system_message_kwargs = {"you_are": "a photovoltaic expert",
                         "argument": "photovoltaic",
                         "you_can_only_answer": "photovoltaic",
                         "if_other_topics": "do not answer.",
                         "more_info": #"Use the Google search tool 4 times, each time carrying out a different query but"#
                                      #" always related to the question (so as to obtain the most heterogeneous results "#
                                      #"possible). Therefore, use the search tool in the photovoltaic knowledge base to "#
                                      #"better analyze the technical content of the searches carried out on Google.\n"#
                                      "Identifies the basic topics involved in formulating the answer. "
                                      "Therefore uses the search tool to obtain information about each of them, "
                                      "each time providing a different input to the tool (in relation to "
                                      "the interested topic).\n ",
                                      #"If the answer contains mathematical formulas or equations write them in a format "
                                      #"that makes them similar to the format generated by Latex, but in such a way that "
                                      #"it is visible in markdown."
                         "language": 'ITALIAN'}

tools = [{"tool_name": "photovoltaic_knowledge_base",
          "function_name": "search_on_vector_store",
          "func_init_kwargs": {"user_id": "abc123",
                               "vector_store_id": "photovoltaic_knowledge_vector_store",
                               "vector_store_kwargs": {
                                   "collection_name": "photovoltaic",
                               },
                               "search_kwargs": {"k": 8},
                               "embedding_function_type": "OpenAIEmbeddings",
                               "embedding_function_kwargs": {"chunk_size": 200},
                               },
          "tool_description": "useful for when you need to refer to photovoltaic information to produce the answer",
          },
         #{"function_name": "search_on_google"
         # },
         ]

########################################################################################################################
########################################################################################################################

st.set_page_config(page_title="Photovoltaic Assistant",
                   page_icon="https://static.wixstatic.com/media/"
                             "63b1fb_4fb8962f303f4686822b59a8c284690a~mv2.png",
                   layout="centered",
                   initial_sidebar_state="auto",
                   menu_items=None)

left_co, cent_co,last_co = st.columns(3)
#with cent_co:
#    st.image("https://static.wixstatic.com/media/63b1fb_4fb8962f303f4686822b59a8c284690a~mv2.png",
#             caption=None, width=None, use_column_width=True,
#             clamp=False, channels="RGB", output_format="auto")

#st.markdown("<h1 style='text-align: center; color: white;'>Assistente Fotovoltaico </h1>", unsafe_allow_html=True)

if "messages" not in st.session_state:
    st.session_state.messages = [{"role": "assistant",
                                  "result": "Sono un assistente virtuale specializzato in fotovoltaico. Sono qui per "
                                            "rispondere alle tue domande e fornirti informazioni sulle tematiche legate "
                                            "all'energia solare fotovoltaica. Ho accesso a un database di conoscenze sul "
                                            "fotovoltaico che posso consultare per fornirti risposte accurate. "
                                            "\n\nCome posso aiutarti?"
                                  }]

if "ai_avatar_url" not in st.session_state:

    st.session_state.ai_avatar_url = ("https://static.wixstatic.com/media/"
                                      "63b1fb_4fb8962f303f4686822b59a8c284690a~mv2.png")

if "user_avatar_url" not in st.session_state:

    st.session_state.user_avatar_url = ("https://encrypted-tbn0.gstatic.com/"
                                        "images?q=tbn:ANd9GcQiBwY_zfAf9K1OBN1"
                                        "eVu660SqIr6TliAKeAhAaWG5mxrLmsva8XPO"
                                        "0xhW2kHwth4D3IWM&usqp=CAU")
    #"https://cdn3.vectorstock.com/i/1000x1000/41/52/man-user-avatar-icon-person-profile-with-chat-vector-29004152.jpg"


def main():

    for message in st.session_state.messages:
        if message["role"] == "user":
            with st.chat_message(message["role"], avatar=st.session_state.user_avatar_url):
                st.markdown(message["question"])
        else:
            with st.chat_message(message["role"], avatar=st.session_state.ai_avatar_url):
                st.markdown(message["result"])

    if prompt := st.chat_input("Say something"):

        st.session_state.messages.append({"role": "user", "question": prompt})

        #####################################################################
        # for secure
        if len(st.session_state.messages) > 10:
            st.session_state.messages = st.session_state.messages[-10:]
        #####################################################################

        with st.chat_message("user", avatar=st.session_state.user_avatar_url):
            st.markdown(prompt)

        with st.chat_message("assistant", avatar=st.session_state.ai_avatar_url):
            message_placeholder = st.empty()
            s = requests.Session()
            full_response = ""
            json_input = {"message": prompt,
                          "system_message": system_message,
                          "system_message_kwargs": system_message_kwargs,
                          "tools": tools,
                          "chat_history": st.session_state.messages[-10:]}

            non_decoded_chunk = b''
            with s.post(url, json=json_input, headers=None, stream=True) as resp:
                for chunk in resp.iter_content():
                    if chunk:
                        non_decoded_chunk += chunk
                        try:
                            full_response += non_decoded_chunk.decode()
                            message_placeholder.markdown(full_response + "▌")
                            non_decoded_chunk = b''
                        except UnicodeDecodeError:
                            pass
            message_placeholder.markdown(full_response)
        st.session_state.messages.append({"role": "assistant", "result": full_response})
########################################################################################################################


def sidebar():
    with st.sidebar:
        st.image("https://static.wixstatic.com/media/63b1fb_e9d8d6bad7544e3d895291f67a1180a4~mv2.png",
                 caption=None, width=None, use_column_width='always',
                 clamp=False, channels="RGB", output_format="auto")

        st.markdown("--- \n")

        st.markdown("<h1 style='text-align: center; color: orange;'>About</h1>",
                    unsafe_allow_html=True)
        st.markdown(
            "L'assistente virtuale della Gold Solar è stato addestrato ad apprendere informazioni da un insieme di 5 "
            "documenti pdf prodotti dai brillanti ricercatori dell'ente ENEA. Grazie alle tecniche di NLP "
            "messe in campo dai ricercatori di Golden AI, potrai soddisfare la tua curiosità chiedendo ciò che desideri "
            "ad un assistente virtuale altamente specializzato nel fotovoltaico!"
            " [Clicca qui](https://www.enea.it/it) per saperne di più riguardo l'ente ENEA e sui notevoli risultati "
            "raggiunti nel campo del fotovoltaico."
        )

        st.markdown("<h1 style='text-align: center; color: orange;'>Fonti</h1>",
                    unsafe_allow_html=True)

        st.markdown("Di seguito puoi trovare i riferimenti online ai documenti "
                    "da cui l'assistente ha appreso tutte le sue conoscenze:\n"
                    " * [Quaderno fotovoltaico](https://www.enea.it/it/seguici/documenti/quaderni-energia/fotovoltaico.pdf)\n"
                    " * [Progettare e installare un impianto fotovoltaico](https://www.enea.it/it/seguici/pubblicazioni/pdf-volumi/2008/v2008_18-progettarefotovoltaico.pdf)\n"
                    " * [Il fotovoltaico](http://www.solaritaly.enea.it/Documentazione/Il%20fotovoltaico.pdf)\n"
                    " * [Fotovoltaico: il processo evolutivo e le nuove frontiere](https://www.enea.it/it/seguici/pubblicazioni/pdf-volumi/2008/focus_fotovoltaico.pdf)\n"
                    " * [Guida rapida al Bonus Casa](https://www.efficienzaenergetica.enea.it/media/attachments/2021/10/15/guida_rapida_bonus_casa_ottobre_2021.pdf)\n")

        #st.header("Domande di esempio:")
        #st.markdown(
        #    "1. Qauli incidenti hanno coinvolto i trasformatori instalalti all'interno dei treni ?\n"
        #    "2. Genera uan sintesi dei report (per punti) riguardanti guasti ai trasformatori.\n"
        #    "3. Descrivi le possibili cause del guasto e le contromisure adottate (enumerandole).\n"
        #    "4. Genera uan tabella (avente due colonne) per la rappresentazione dei dati contenuti nel report.\n"
        #    "5. Quali incidenti si sono verificati con il modello di treno 'ETR521 Rock train'?"
        #    "Nel caso in cui si siano riportati incidenti scrivimi una breve descrizione per ognuno di essi. \n"
        #)
        st.markdown("--- \n")

        st.markdown("<p style='text-align: center; color: orange;'>Powered by <a href='https://www.goldenaiweb.com/'>Golden AI</a></p>",
                    unsafe_allow_html=True)

        st.markdown("<h4 style='text-align: center; color: orange;'>© 2023 by Gold Solar s.r.l</h4>", unsafe_allow_html=True)
########################################################################################################################
########################################################################################################################


main()
sidebar()
